<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSON与GOB</title>
    <url>/2023/12/18/JSON%E4%B8%8EGOB/</url>
    <content><![CDATA[<p>在 Go 语言中，JSON（JavaScript Object Notation）和 GOB（Go Binary）是两种常用的序列化和反序列化数据的格式。<code>encoding/json</code>想必大家都不陌生，<code>encoding/gob</code>在常规 golang 的开发项目中使用频率就低了很多，两者的区别是什么？使用场景又是什么？一起来学习下。</p>
<h1 id="JSON-与-GOB-的区别"><a href="#JSON-与-GOB-的区别" class="headerlink" title="JSON 与 GOB 的区别"></a>JSON 与 GOB 的区别</h1><table>
<thead>
<tr>
<th>对比维度</th>
<th>JSON</th>
<th>GOB</th>
</tr>
</thead>
<tbody><tr>
<td>可读性</td>
<td>JSON 是一种文本格式，易于阅读和理解。它使用键值对的形式表示数据，并使用大括号和方括号来表示对象和数组。</td>
<td>GOB 是一种二进制格式，不可读，主要用于在 Go 程序之间高效地传输和存储数据。</td>
</tr>
<tr>
<td>兼容性</td>
<td>JSON 是一种通用的数据交换格式，可以被多种编程语言解析和生成。</td>
<td>GOB 是 Go 语言特有的格式，只能在 Go 程序之间进行序列化和反序列化。</td>
</tr>
<tr>
<td>数据类型支持</td>
<td>JSON 支持基本数据类型（如字符串、数字、布尔值）、数组、对象和 null 值。</td>
<td>GOB 支持 Go 语言的所有数据类型，包括结构体、切片、映射、通道等。</td>
</tr>
<tr>
<td>序列化效率</td>
<td>JSON 的序列化和反序列化相对较慢，占用较多的存储空间和网络带宽。</td>
<td>由于 GOB 是二进制格式，相对于 JSON，它在序列化和反序列化过程中更高效，占用更少的存储空间和网络带宽。</td>
</tr>
<tr>
<td>跨语言支持</td>
<td>由于 JSON 是一种通用格式，可以被多种编程语言解析和生成，因此在不同语言之间进行数据交换更方便。</td>
<td>GOB 只能在 Go 语言程序之间使用，不适用于跨语言的数据交换。</td>
</tr>
</tbody></table>
<p>总结：JSON 是一种通用的、可读性强的数据交换格式，适用于跨语言的数据交换。而 GOB 是 Go 语言特有的、高效的二进制格式，适用于在 Go 程序之间进行数据传输和存储。选择使用哪种格式取决于你的具体需求和使用场景。</p>
<h1 id="GOB-具体使用场景"><a href="#GOB-具体使用场景" class="headerlink" title="GOB 具体使用场景"></a>GOB 具体使用场景</h1><ol>
<li><p>Go 程序之间的通信：如果你有多个 Go 程序之间需要进行数据交换，使用 GOB 可以实现高效的序列化和反序列化，减少数据传输的开销。</p>
</li>
<li><p>数据持久化：如果你需要将 Go 程序中的数据持久化到磁盘或数据库中，使用 GOB 可以将数据以二进制格式进行存储，占用更少的存储空间，并且读写速度更快。</p>
</li>
<li><p>缓存数据：如果你需要将数据缓存在内存中，以提高读取速度，使用 GOB 可以将数据以二进制格式进行序列化，并在需要时快速反序列化，提高缓存的效率。</p>
</li>
<li><p>分布式系统：如果你正在构建分布式系统，需要在不同的节点之间传输数据，使用 GOB 可以实现高效的数据传输，减少网络带宽的占用。</p>
</li>
<li><p>RPC（远程过程调用）：如果你使用 Go 语言的 RPC 框架进行远程过程调用，GOB 是默认的序列化格式，可以方便地进行数据传输和调用。</p>
</li>
</ol>
<p>总结：GOB 适用于在 Go 程序之间高效地传输和存储数据的场景，特别是在需要高性能和低开销的情况下。</p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP与jQuery</title>
    <url>/2016/12/23/PHP%E4%B8%8EjQuery/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>作为一个初入 PHP、偶尔写一点后台管理系统的前端部分的小菜鸟，需要学习的东西真的太多太多。<br>     循序渐进，本月研读了 Pro PHP and jQuery 这本书，印象深刻，所以趁热打铁整理了一些对前后端联调很有用的小 Tips。</p>
<p>后台向前端传值方式：1、模板输出(smarty); 2、ajax 函数回调；</p>
<h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h2><p>为了防止 PHP 中的变量符$与jQuery冲突，本文代码中jQuery与正常情况使用jQuery时的$等价。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>即传送给后端的数据，多数为表单内容。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">jQuery</span>(<span class="string">&#x27;.content&#x27;</span>).<span class="title function_ invoke__">html</span>();  <span class="comment">//获取标签内所有内容，包括html符号等</span></span><br><span class="line"><span class="title function_ invoke__">jQuery</span>(<span class="string">&#x27;.content&#x27;</span>).<span class="title function_ invoke__">text</span>();  <span class="comment">//获取标签内所有文本</span></span><br><span class="line"><span class="title function_ invoke__">jQuery</span>(<span class="string">&#x27;.content&#x27;</span>).<span class="title function_ invoke__">val</span>();  <span class="comment">//获取value值</span></span><br><span class="line"><span class="title function_ invoke__">jQuery</span>(this).<span class="built_in">parent</span>().<span class="title function_ invoke__">find</span>(<span class="string">&#x27;.content&#x27;</span>).<span class="title function_ invoke__">text</span>(); <span class="comment">//在当前元素的父元素中查找content类，并获取文本值</span></span><br><span class="line"><span class="title function_ invoke__">jQuery</span>(this).<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;type&#x27;</span>);  <span class="comment">//获取当前元素type属性的值</span></span><br></pre></td></tr></table></figure>

<h3 id="前端数据验证"><a href="#前端数据验证" class="headerlink" title="前端数据验证"></a>前端数据验证</h3><p>为防止前端频繁访问后台，加大服务器压力，前端需进行数据验证。</p>
<h3 id="空值判断"><a href="#空值判断" class="headerlink" title="空值判断"></a>空值判断</h3><p>手机号、电子邮件等：使用正则表达式验证<br>提醒式验证：如“确定删除”，可以使用 confirm()等方法<br>验证失败可弹出提示或重定位界面。</p>
<h3 id="ajax-传值"><a href="#ajax-传值" class="headerlink" title="ajax 传值"></a>ajax 传值</h3><p>前端验证成功后就可以向后台请求数据了，jQuery 给我们封装了 ajax 方法，多数操作将是 success 回调函数中完成。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="title function_ invoke__">ajax</span>(&#123;</span><br><span class="line">	<span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,	//传值方式，post/get</span><br><span class="line">	<span class="attr">url</span>: <span class="string">&#x27;/gxapi/rank&#x27;</span>,	//请求地址</span><br><span class="line">	<span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,   //传送数据格式，json是前后端常用传值数据格式</span><br><span class="line">	<span class="attr">data</span>: &#123;<span class="attr">content</span>: content, <span class="attr">type</span>: type&#125;, //要传送的数据值&#123;后端接受字段名称：前端发送字段名称&#125;,通常另两者名称相等。</span><br><span class="line">	<span class="attr">success</span>: <span class="title function_ invoke__">funtion</span> (res) &#123;</span><br><span class="line">		<span class="keyword">if</span>(res.code) &#123;</span><br><span class="line">			<span class="comment">//有数据的操作,多在此更改局部数据</span></span><br><span class="line">			...</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//请求失败，多为未登录、无数据等</span></span><br><span class="line">			...</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意：1、浏览器可以自动识别 json 数据，web 应用可以不用设置；2、如果涉及移动端，则必须设置 json 格式；3、跨域请求数据需设置 dataType 格式为 jsonp。</p>
<h2 id="碎片功能"><a href="#碎片功能" class="headerlink" title="碎片功能"></a>碎片功能</h2><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><ul>
<li>点击某元素触发事件，如增加、删除、编辑等。</li>
</ul>
<p>通过模板渲染所得的页面，可以直接对 dom 元素进行操作，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">jQuery</span>(<span class="string">&#x27;.btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="comment">//点击事件后续操作</span></span><br><span class="line">	...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过动态生成得到的界面，操作 dom 元素时需要绑定元素，下面的例子中，list 类是非动态生成的元素，我们将 delete 点击事件绑定到该元素上，例：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">jQuery</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.delete&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="comment">//点击事件后续操作</span></span><br><span class="line">	...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>其中 click 可以更改为 change、hover 等，在对列表进行操作时常用。另外还有一种方式，适用于 jQuery 版本较低的场景。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">jQuery</span>(<span class="string">&quot;.list&quot;</span>).<span class="title function_">delegate</span>(<span class="string">&quot;.delete&quot;</span>, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="comment">//点击事件后续操作</span></span><br><span class="line">	...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，这两个方法的 click 位置不同。</p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><ul>
<li>保留小数点后两位：Number(num).toFixed(2)</li>
<li>遍历：可用于批量操作</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> jQuery.<span class="title function_">each</span>(res.<span class="property">data</span>, <span class="keyword">function</span> (<span class="params">i, item</span>) &#123;</span><br><span class="line">	<span class="comment">//批量操作、结合append()生成列表行等</span></span><br><span class="line">	...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意：当遍历 dom 元素时一定要注意在遍历前元素已经生成。</p>
<h2 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h2><ul>
<li>前端获取到数据后可以存在 display:none 的标签里，便于以后使用。</li>
<li>要更改样式最简单的方法还是通过 css，故我们可以通过给元素添加 class 并设置 class 的值来批量更改样式。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>hbase基础学习</title>
    <url>/2023/12/11/hbase%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>项目要求：存储流水信息，通过 ID 查询流水内容。</p>
<p>在对比 clickhouse、hbase、es 后，选择了 hbase 作为流水存储 db，宽表存储，价格实惠，除了需要学习下使用方法。</p>
<p><img src="/images/Hbase.png" alt="基础知识流程图"></p>
]]></content>
      <tags>
        <tag>hbase</tag>
        <tag>编程知识</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s - 基础介绍</title>
    <url>/2025/02/27/k8s-%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Kubernetes（通常缩写为K8s）是一个开源的容器编排平台，旨在自动化容器化应用的部署、扩展和管理。它最初由Google开发，现在由云原生计算基金会（CNCF）维护。以下是Kubernetes的基础介绍：</p>
<h3 id="1-Kubernetes的核心概念"><a href="#1-Kubernetes的核心概念" class="headerlink" title="1. Kubernetes的核心概念"></a>1. <strong>Kubernetes的核心概念</strong></h3><ul>
<li><p><strong>容器</strong>：Kubernetes主要用于管理容器化应用，容器是一种轻量级的虚拟化技术，可以在同一操作系统上运行多个独立的应用实例。</p>
</li>
<li><p><strong>Pod</strong>：Pod是Kubernetes中最小的可部署单元，通常包含一个或多个紧密相关的容器。Pod中的容器共享网络和存储资源。</p>
</li>
<li><p><strong>节点（Node）</strong>：节点是Kubernetes集群中的一个工作机器，可以是物理机或虚拟机。每个节点上运行着一个Kubernetes代理（kubelet）和容器运行时（如Docker）。</p>
</li>
<li><p><strong>集群（Cluster）</strong>：集群是由多个节点组成的集合，Kubernetes通过集群来管理和调度容器。</p>
</li>
<li><p><strong>控制平面（Control Plane）</strong>：控制平面负责管理集群的状态，包括调度、监控和维护集群的健康。主要组件包括API服务器、调度器、控制管理器和etcd（分布式键值存储）。</p>
</li>
</ul>
<h3 id="2-Kubernetes的主要组件"><a href="#2-Kubernetes的主要组件" class="headerlink" title="2. Kubernetes的主要组件"></a>2. <strong>Kubernetes的主要组件</strong></h3><ul>
<li><p><strong>API Server</strong>：Kubernetes的核心组件，提供RESTful API接口，所有的操作都通过API Server进行。</p>
</li>
<li><p><strong>etcd</strong>：一个高可用的分布式键值存储，用于保存Kubernetes集群的所有数据和状态。</p>
</li>
<li><p><strong>Scheduler</strong>：负责将Pod调度到合适的节点上，考虑资源需求、节点负载等因素。</p>
</li>
<li><p><strong>Controller Manager</strong>：管理集群的控制循环，确保集群的实际状态与期望状态一致。</p>
</li>
<li><p><strong>Kubelet</strong>：运行在每个节点上的代理，负责管理Pod的生命周期，确保容器正常运行。</p>
</li>
<li><p><strong>Kube Proxy</strong>：负责网络代理和负载均衡，处理服务的网络请求。</p>
</li>
</ul>
<h3 id="3-Kubernetes的基本资源"><a href="#3-Kubernetes的基本资源" class="headerlink" title="3. Kubernetes的基本资源"></a>3. <strong>Kubernetes的基本资源</strong></h3><ul>
<li><p><strong>Deployment</strong>：用于管理无状态应用的声明式更新，支持滚动更新和回滚。</p>
</li>
<li><p><strong>Service</strong>：定义一组Pod的访问策略，提供负载均衡和服务发现。</p>
</li>
<li><p><strong>ConfigMap</strong>：用于存储非机密的配置数据，可以在Pod中使用。</p>
</li>
<li><p><strong>Secret</strong>：用于存储敏感信息（如密码、令牌等），以安全的方式提供给Pod。</p>
</li>
<li><p><strong>Volume</strong>：用于持久化存储，支持多种存储后端（如NFS、云存储等）。</p>
</li>
</ul>
<h3 id="4-Kubernetes的工作流程"><a href="#4-Kubernetes的工作流程" class="headerlink" title="4. Kubernetes的工作流程"></a>4. <strong>Kubernetes的工作流程</strong></h3><ol>
<li><p><strong>定义应用</strong>：使用YAML或JSON文件定义应用的期望状态，包括Pod、Service、Deployment等。</p>
</li>
<li><p><strong>提交配置</strong>：将定义的配置提交到Kubernetes API Server。</p>
</li>
<li><p><strong>调度与部署</strong>：Kubernetes Scheduler根据资源需求和策略将Pod调度到合适的节点上，Kubelet负责在节点上启动和管理容器。</p>
</li>
<li><p><strong>监控与自愈</strong>：Kubernetes持续监控集群状态，确保实际状态与期望状态一致。如果某个Pod失败，Kubernetes会自动重启或替换它。</p>
</li>
</ol>
<h3 id="5-Kubernetes的优势"><a href="#5-Kubernetes的优势" class="headerlink" title="5. Kubernetes的优势"></a>5. <strong>Kubernetes的优势</strong></h3><ul>
<li><p><strong>自动化</strong>：自动化容器的部署、扩展和管理，减少人工干预。</p>
</li>
<li><p><strong>可扩展性</strong>：支持水平扩展和负载均衡，能够处理大规模的应用。</p>
</li>
<li><p><strong>自愈能力</strong>：自动监控和修复故障，确保应用的高可用性。</p>
</li>
<li><p><strong>灵活性</strong>：支持多种云环境和本地部署，适应不同的基础设施。</p>
</li>
</ul>
<h3 id="6-Kubernetes的生态系统"><a href="#6-Kubernetes的生态系统" class="headerlink" title="6. Kubernetes的生态系统"></a>6. <strong>Kubernetes的生态系统</strong></h3><p>Kubernetes有一个丰富的生态系统，包含许多工具和项目，如：</p>
<ul>
<li><strong>Helm</strong>：Kubernetes的包管理工具，简化应用的部署和管理。</li>
<li><strong>Prometheus</strong>：用于监控和告警的开源系统。</li>
<li><strong>Istio</strong>：服务网格技术，提供微服务间的通信管理和安全性。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Kubernetes是现代云原生应用的核心技术之一，提供了强大的容器编排能力。通过理解Kubernetes的基本概念和组件，开发者和运维人员可以更有效地管理和部署容器化应用。</p>
]]></content>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql binlog 基础知识</title>
    <url>/2025/08/12/mysql-binlog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>在 MySQL 数据库中，二进制日志（binary log，通常简称为 binlog）是用于记录所有更改数据库内容的事件的日志文件。它可以用来进行数据恢复、数据复制和审计等。</p>
<p>以下是有关 MySQL binlog 的一些基本概念和使用示例。</p>
<h3 id="1-启用二进制日志"><a href="#1-启用二进制日志" class="headerlink" title="1. 启用二进制日志"></a>1. 启用二进制日志</h3><p>在使用 binlog 之前，需要确保它在 MySQL 配置文件中启用。可以在 MySQL 的配置文件 <code>my.cnf</code>（或 <code>my.ini</code>）中设置以下参数：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br></pre></td></tr></table></figure>
<p>然后重启 MySQL 服务以使更改生效。</p>
<h3 id="2-查看当前-binlog-状态"><a href="#2-查看当前-binlog-状态" class="headerlink" title="2. 查看当前 binlog 状态"></a>2. 查看当前 binlog 状态</h3><p>使用以下命令查看 binlog 是否启用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;log_bin&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>如果返回值为 <code>ON</code>，则表示 binlog 已启用。</p>
<h3 id="3-执行-SQL-操作并生成-binlog"><a href="#3-执行-SQL-操作并生成-binlog" class="headerlink" title="3. 执行 SQL 操作并生成 binlog"></a>3. 执行 SQL 操作并生成 binlog</h3><p>假设我们有一个表 <code>users</code>，并执行一些 SQL 操作：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email) <span class="keyword">VALUES</span> (<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;alice@example.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email) <span class="keyword">VALUES</span> (<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;bob@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在执行这些 SQL 操作后，MySQL 会将这些操作记录到 binlog 中。可以使用以下命令查看 binlog 文件名及其位置：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS;</span><br></pre></td></tr></table></figure>

<h3 id="4-查看-binlog-内容"><a href="#4-查看-binlog-内容" class="headerlink" title="4. 查看 binlog 内容"></a>4. 查看 binlog 内容</h3><p>可以使用 <code>mysqlbinlog</code> 工具查看 binlog 文件的内容。假设 binlog 文件名为 <code>mysql-bin.000001</code>，则可以用以下命令查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog mysql-bin.000001</span><br></pre></td></tr></table></figure>

<p>这将输出该二进制日志文件中所有操作的 SQL 语句和相应的信息。</p>
<h3 id="5-从-binlog-恢复数据"><a href="#5-从-binlog-恢复数据" class="headerlink" title="5. 从 binlog 恢复数据"></a>5. 从 binlog 恢复数据</h3><p>如果需要从 binlog 中恢复数据，可以使用 <code>mysqlbinlog</code> 命令将 binlog 导入到数据库中。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog mysql-bin.000001 | mysql -u username -p database_name</span><br></pre></td></tr></table></figure>

<p>这将把 binlog 文件中的所有操作恢复到指定的数据库中。</p>
<h3 id="6-配置-binlog-格式"><a href="#6-配置-binlog-格式" class="headerlink" title="6. 配置 binlog 格式"></a>6. 配置 binlog 格式</h3><p>MySQL 支持三种二进制日志格式：<code>ROW</code>、<code>STATEMENT</code> 和 <code>MIXED</code>。可以通过以下命令查看当前 binlog 格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;binlog_format&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>可以通过设置 <code>binlog_format</code> 来更改二进制日志格式，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> binlog_format <span class="operator">=</span> <span class="string">&#x27;ROW&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="7-实际示例"><a href="#7-实际示例" class="headerlink" title="7. 实际示例"></a>7. 实际示例</h3><p>假设我们在 <code>users</code> 表中插入数据，然后来看 binlog 的实际操作记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email) <span class="keyword">VALUES</span> (<span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;charlie@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在 binlog 中，对于这一操作的记录（取决于 <code>binlog_format</code>）可能会类似于以下内容：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email) <span class="keyword">VALUES</span> (<span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;charlie@example.com&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>当然实际的格式和内容会因为日志格式的不同而有所变化。</p>
<h3 id="8-清理-binlog"><a href="#8-清理-binlog" class="headerlink" title="8. 清理 binlog"></a>8. 清理 binlog</h3><p>为了避免 binlog 占用过多的磁盘空间，可以定期清理不再需要的 binlogs。使用以下命令清除所有的 binlog 文件，保留最新的 N 个文件：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PURGE <span class="type">BINARY</span> LOGS <span class="keyword">TO</span> <span class="string">&#x27;mysql-bin.000002&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>或者按日期清理：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PURGE <span class="type">BINARY</span> LOGS BEFORE <span class="string">&#x27;2023-04-01 00:00:00&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MySQL 的二进制日志（binlog）是一个强大的功能，可以帮助你记录数据库变更、进行数据恢复以及实现数据复制等。在开发和维护 MySQL 数据库时，了解和掌握 binlog 的用法非常重要。</p>
]]></content>
      <categories>
        <category>存储/缓存</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>binlog</tag>
      </tags>
  </entry>
  <entry>
    <title>【解决】已经添加了秘钥后还报git@github.com: Permission denied (publickey).</title>
    <url>/2023/12/19/%E5%B7%B2%E7%BB%8F%E6%B7%BB%E5%8A%A0%E4%BA%86%E7%A7%98%E9%92%A5%E5%90%8E%E8%BF%98%E6%8A%A5git-github-com-Permission-denied-publickey/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在更新一些 nvim 依赖时发现偶尔会报：<code>git@github.com: Permission denied (publickey).</code>，但是我已经添加过 github 秘钥配置了，使用 ssh 命令<code>ssh -T git@github.com</code>测试也报同样问题。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/g_id_rsa # g_id_rsa为本机的github秘钥</span><br></pre></td></tr></table></figure>

<p>再使用<code>ssh -T git@github.com</code>测试，成功！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>已经添加过秘钥但是还报错通常是本机的这个 git 仓库并没有和这个 SSH key 关联上，重新添加一下就好了。</p>
]]></content>
      <categories>
        <category>经验之谈</category>
      </categories>
  </entry>
  <entry>
    <title>开发过程中的设计模式</title>
    <url>/2025/08/20/%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="函数选项模式"><a href="#函数选项模式" class="headerlink" title="函数选项模式"></a>函数选项模式</h2><p>用于构建灵活且可扩展的功能配置</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ol>
<li><strong>定义一个选项类型</strong>：可以使用接口、函数类型或结构体来定义选项。</li>
<li><strong>定义一个配置函数</strong>：对于每个选项，定义一个配置函数，该函数接受目标配置结构体的指针，并修改其中的配置。</li>
<li><strong>在主函数中应用选项</strong>：在需要的地方，接受这些配置函数，并将其应用于默认配置。</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Config 是一个配置结构体</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">	Host      <span class="type">string</span></span><br><span class="line">	Port      <span class="type">int</span></span><br><span class="line">	TLS       <span class="type">bool</span></span><br><span class="line">	Timeout   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Option 是一个函数类型，用于配置 Config</span></span><br><span class="line"><span class="keyword">type</span> Option <span class="function"><span class="keyword">func</span><span class="params">(*Config)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WithHost 设置主机名选项</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithHost</span><span class="params">(host <span class="type">string</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *Config)</span></span> &#123;</span><br><span class="line">        c.Host = host</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WithPort 设置端口号选项</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithPort</span><span class="params">(port <span class="type">int</span>)</span></span> Option &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *Config)</span></span> &#123;</span><br><span class="line">        c.Port = port</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewConfig 创建一个默认配置并应用选项</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConfig</span><span class="params">(options ...Option)</span></span> *Config &#123;</span><br><span class="line">	config := &amp;Config&#123;</span><br><span class="line">		Host:    <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">		Port:    <span class="number">8080</span>,</span><br><span class="line">		TLS:     <span class="literal">false</span>,</span><br><span class="line">		Timeout: <span class="number">30</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, option := <span class="keyword">range</span> options &#123;</span><br><span class="line">		option(config)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注册表模式-依赖注入模式"><a href="#注册表模式-依赖注入模式" class="headerlink" title="注册表模式 + 依赖注入模式"></a>注册表模式 + 依赖注入模式</h2><h3 id="注册表模式使用场景"><a href="#注册表模式使用场景" class="headerlink" title="注册表模式使用场景"></a>注册表模式使用场景</h3><ol>
<li>存储和管理系统的配置。</li>
<li>跨不同组件共享单例实例。</li>
<li>动态加载类或框架组件。</li>
</ol>
<h3 id="注册表示例"><a href="#注册表示例" class="headerlink" title="注册表示例"></a>注册表示例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务接口</span></span><br><span class="line"><span class="keyword">type</span> Service <span class="keyword">interface</span> &#123;</span><br><span class="line">    Execute()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Registry <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu       sync.RWMutex</span><br><span class="line">    services <span class="keyword">map</span>[<span class="type">string</span>]Service</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册和获取服务的方法保持不变，只需将 Lock/Unlock 替换为 RLock/RUnlock 和 Lock/Unlock</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Registry)</span></span> Register(name <span class="type">string</span>, service Service) &#123;</span><br><span class="line">    r.mu.Lock()         <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">defer</span> r.mu.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">    r.services[name] = service</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Registry)</span></span> Get(name <span class="type">string</span>) Service &#123;</span><br><span class="line">    r.mu.RLock()         <span class="comment">// 读取锁</span></span><br><span class="line">    <span class="keyword">defer</span> r.mu.RUnlock() <span class="comment">// 读取解锁</span></span><br><span class="line">    <span class="keyword">return</span> r.services[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>将对象的依赖关系从内部管理转移到外部，从而使得对象的创建与其所依赖的对象解耦。</p>
<h3 id="两种模式如何结合？"><a href="#两种模式如何结合？" class="headerlink" title="两种模式如何结合？"></a>两种模式如何结合？</h3><p>可将<code>Service interface</code>改成<code>函数定义</code>，示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Service <span class="function"><span class="keyword">func</span><span class="params">(provider <span class="type">string</span>)</span></span> <span class="type">error</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>经验之谈</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>用redis进行搜索优化的两种方法</title>
    <url>/2017/02/15/%E7%94%A8redis%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>为了确保安全与速度，除了增、删、改之外，我们通常不直接对数据库进行操作，而是利用 redis 或者 mencache 等缓存机制获取数据。如何使用 redis 进行搜索呢？本文通过姓名&#x2F;拼音首字母搜索人物基本信息实例叙述两种 redis 搜索方式，适用的情况也有所不同。</p>
</blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>LNMP&#x2F;Redis</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>将所有人物信息存入一个 string 格式的 key(user_all)中，搜索时遍历查找 key 的内容。</p>
<p>实例中将人物的 id(uid)、姓名(name)、拼音首字母(spell)等信息存入 user_all 键。</p>
<p>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$con</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;con&#x27;</span>]; <span class="comment">//接收搜索信息</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">	<span class="variable">$redis</span> = <span class="keyword">new</span> <span class="title class_">Redis</span>();</span><br><span class="line">	<span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">$ret</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;user_all&#x27;</span>), <span class="literal">TRUE</span>);<span class="comment">//获取user_all所有数据</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$ret</span>)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$searchInfos</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从第一位往后匹配</span></span><br><span class="line">	<span class="keyword">foreach</span> (<span class="variable">$ret</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$v</span>[<span class="string">&#x27;name&#x27;</span>], <span class="variable">$con</span>) === <span class="number">0</span> || <span class="title function_ invoke__">strpos</span>(<span class="variable">$v</span>[<span class="string">&#x27;spell&#x27;</span>], <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$con</span>)) === <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="variable">$searchInfos</span>[] = <span class="variable">$v</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$searchInfos</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$searchInfos</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意:使用 get(key)的方式获取到的数据格式可能是 object(stdClass)，遍历时需要用访问对象的方式获取数据，因此使用 json_decode($content, TRUE)函数将其变为 array 格式。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>将每个人物的信息分别存入 string 格式的 key(以 prefix<em>name_uid,prefix_spell_uid 的形式，如 user</em>路飞_001，user_LF_001)中，通过 keys()对键名进行模糊查询，以获取人物信息。</p>
<p>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$con</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;con&#x27;</span>]; <span class="comment">//接收搜索信息</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">	<span class="variable">$redis</span> = <span class="keyword">new</span> <span class="title class_">Redis</span>();</span><br><span class="line">	<span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">$ret</span> = <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">keys</span>(<span class="string">&#x27;user_&#x27;</span> . <span class="variable">$con</span> . <span class="string">&#x27;*&#x27;</span>);<span class="comment">//获取所有匹配数据</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$ret</span>)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$searchInfos</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">foreach</span> (<span class="variable">$ret</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">		<span class="variable">$searchInfos</span>[] = <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$v</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$searchInfos</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$searchInfos</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两种方法比较"><a href="#两种方法比较" class="headerlink" title="两种方法比较"></a>两种方法比较</h2><p>两种方式均能获得搜索结果，也都有各自的优缺点：</p>
<p>第一种方式，进行增加、删除、修改操作时都需进行数据库查询，获取所有人物信息，添加到 user_all 键中，查询时直接进行字符串匹配；<br>第二种方式，需要对 redis 键进行全部查询操作，不适用于键特别多的情况。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//除掉字符串中的标点符号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spellReplace</span>(<span class="params"><span class="variable">$spell</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$char</span> = <span class="string">&quot;。、！？：；﹑•＂…‘’“”〝〞∕¦‖—　〈〉﹞﹝「」‹›〖〗】【»«』『〕〔》《﹐¸﹕︰﹔！¡？¿﹖﹌﹏﹋＇´ˊˋ―﹫︳︴¯＿￣﹢﹦﹤‐­˜﹟﹩﹠﹪﹡﹨﹍﹉﹎﹊ˇ︵︶︷︸︹︿﹀︺︽︾ˉ﹁﹂﹃﹄︻︼（）# #&quot;</span>;</span><br><span class="line">	<span class="variable">$pattern</span> = <span class="keyword">array</span>(</span><br><span class="line">	    <span class="string">&quot;/[[:punct:]]/i&quot;</span>, <span class="comment">//英文标点符号</span></span><br><span class="line">	    <span class="string">&#x27;/[&#x27;</span> . <span class="variable">$char</span> . <span class="string">&#x27;]/u&#x27;</span>, <span class="comment">//中文标点符号</span></span><br><span class="line">	    <span class="string">&#x27;/[ ]&#123;2,&#125;/&#x27;</span></span><br><span class="line">	);</span><br><span class="line">	<span class="variable">$str</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$spell</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取拼音首字母，如yuan zi jiang =&gt;YZJ</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spellChar</span>(<span class="params"><span class="variable">$spell</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$new_name</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="variable">$nword</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot; &quot;</span>, <span class="variable">$spell</span>);</span><br><span class="line">	<span class="keyword">foreach</span> (<span class="variable">$nword</span> <span class="keyword">as</span> <span class="variable">$letter</span>) &#123;</span><br><span class="line">		<span class="variable">$new_name</span> .= <span class="variable">$letter</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$new_name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>被碎片化信息包围的我们...</title>
    <url>/2023/12/08/%E8%A2%AB%E7%A2%8E%E7%89%87%E5%8C%96%E4%BF%A1%E6%81%AF%E5%8C%85%E5%9B%B4%E7%9A%84%E6%88%91%E4%BB%AC/</url>
    <content><![CDATA[<p>2023 年，经历过数次微博、抖音的卸载安装操作后，最终我每日<code>临幸</code>的 APP 分成了两个设备群：</p>
<ul>
<li><p>手机：小红书、微博、王者荣耀</p>
</li>
<li><p>Pad：抖音</p>
<p>我很忙，我真的很忙。每天都要给自己洗脑，从睁眼到入睡，无数的内容占据了我的时间，吃饭会看一会、去卫生间看一会，下班回家先摊着刷会抖音，不知不觉时间就从 20:00 跳到了 23:59，你问我这期间获取到了什么消息？答：阿巴阿巴阿巴…..</p>
<p>相信有这种体验的不止我一个人，为此我们可以做些什么呢？</p>
<ol>
<li>找一项日常的事情，坚持一个月。比如：每天背 10 个单词、读一篇好文、锻炼 30 分钟……习惯形成之后，成就感随之而来；</li>
<li>化碎片信息为整。每天挨个浏览的信息，按照目前大部分 APP 都有的推荐算法逻辑，大多会分为几类，对于我来说便是：摄影、萌宠、穿搭以及美食这几个大类，在结束一天的碎片化信息获取之后，我将使用思维导图的方式，把有意义的内容记录下来，太过重复的内容则使用 APP 自身的<code>不感兴趣</code>方式挪出我的推荐池，过滤电子垃圾；</li>
<li>主动检索。碎片化信息对我思维能力、记忆能力的影响很大，多采用主动出击的方式，了解自己需要的内容，避免被动的接收信息导致大脑不断刷新内存；</li>
<li>多接触现实生活，比如有意义有主题的社交、多参与拥抱大自然活动，从外部汲取能量。</li>
</ol>
<p>光阴似箭，日月如梭真是老生常谈了，现在到退休还有好几十年，希望多做一些有意义的事情吧！</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>随便写写</tag>
      </tags>
  </entry>
</search>
