<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023下半年第一场雪（准确描述）</title>
    <url>/2023/12/11/2023%E4%B8%8B%E5%8D%8A%E5%B9%B4%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9B%AA%EF%BC%88%E5%87%86%E7%A1%AE%E6%8F%8F%E8%BF%B0%EF%BC%89/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JSON与GOB</title>
    <url>/2023/12/18/JSON%E4%B8%8EGOB/</url>
    <content><![CDATA[<p>在 Go 语言中，JSON（JavaScript Object Notation）和 GOB（Go Binary）是两种常用的序列化和反序列化数据的格式。<code>encoding/json</code>想必大家都不陌生，<code>encoding/gob</code>在常规 golang 的开发项目中使用频率就低了很多，两者的区别是什么？使用场景又是什么？一起来学习下。</p>
<h1 id="JSON-与-GOB-的区别"><a href="#JSON-与-GOB-的区别" class="headerlink" title="JSON 与 GOB 的区别"></a>JSON 与 GOB 的区别</h1><table>
<thead>
<tr>
<th>对比维度</th>
<th>JSON</th>
<th>GOB</th>
</tr>
</thead>
<tbody><tr>
<td>可读性</td>
<td>JSON 是一种文本格式，易于阅读和理解。它使用键值对的形式表示数据，并使用大括号和方括号来表示对象和数组。</td>
<td>GOB 是一种二进制格式，不可读，主要用于在 Go 程序之间高效地传输和存储数据。</td>
</tr>
<tr>
<td>兼容性</td>
<td>JSON 是一种通用的数据交换格式，可以被多种编程语言解析和生成。</td>
<td>GOB 是 Go 语言特有的格式，只能在 Go 程序之间进行序列化和反序列化。</td>
</tr>
<tr>
<td>数据类型支持</td>
<td>JSON 支持基本数据类型（如字符串、数字、布尔值）、数组、对象和 null 值。</td>
<td>GOB 支持 Go 语言的所有数据类型，包括结构体、切片、映射、通道等。</td>
</tr>
<tr>
<td>序列化效率</td>
<td>JSON 的序列化和反序列化相对较慢，占用较多的存储空间和网络带宽。</td>
<td>由于 GOB 是二进制格式，相对于 JSON，它在序列化和反序列化过程中更高效，占用更少的存储空间和网络带宽。</td>
</tr>
<tr>
<td>跨语言支持</td>
<td>由于 JSON 是一种通用格式，可以被多种编程语言解析和生成，因此在不同语言之间进行数据交换更方便。</td>
<td>GOB 只能在 Go 语言程序之间使用，不适用于跨语言的数据交换。</td>
</tr>
</tbody></table>
<p>总结：JSON 是一种通用的、可读性强的数据交换格式，适用于跨语言的数据交换。而 GOB 是 Go 语言特有的、高效的二进制格式，适用于在 Go 程序之间进行数据传输和存储。选择使用哪种格式取决于你的具体需求和使用场景。</p>
<h1 id="GOB-具体使用场景"><a href="#GOB-具体使用场景" class="headerlink" title="GOB 具体使用场景"></a>GOB 具体使用场景</h1><ol>
<li><p>Go 程序之间的通信：如果你有多个 Go 程序之间需要进行数据交换，使用 GOB 可以实现高效的序列化和反序列化，减少数据传输的开销。</p>
</li>
<li><p>数据持久化：如果你需要将 Go 程序中的数据持久化到磁盘或数据库中，使用 GOB 可以将数据以二进制格式进行存储，占用更少的存储空间，并且读写速度更快。</p>
</li>
<li><p>缓存数据：如果你需要将数据缓存在内存中，以提高读取速度，使用 GOB 可以将数据以二进制格式进行序列化，并在需要时快速反序列化，提高缓存的效率。</p>
</li>
<li><p>分布式系统：如果你正在构建分布式系统，需要在不同的节点之间传输数据，使用 GOB 可以实现高效的数据传输，减少网络带宽的占用。</p>
</li>
<li><p>RPC（远程过程调用）：如果你使用 Go 语言的 RPC 框架进行远程过程调用，GOB 是默认的序列化格式，可以方便地进行数据传输和调用。</p>
</li>
</ol>
<p>总结：GOB 适用于在 Go 程序之间高效地传输和存储数据的场景，特别是在需要高性能和低开销的情况下。</p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase基础学习</title>
    <url>/2023/12/11/hbase%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>项目要求：存储流水信息，通过 ID 查询流水内容。</p>
<p>在对比 clickhouse、hbase、es 后，选择了 hbase 作为流水存储 db，宽表存储，价格实惠，除了需要学习下使用方法。</p>
<p><img src="/images/Hbase.png" alt="基础知识流程图"></p>
]]></content>
      <tags>
        <tag>hbase</tag>
        <tag>编程知识</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s - 基础介绍</title>
    <url>/2025/02/27/k8s-%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Kubernetes（通常缩写为K8s）是一个开源的容器编排平台，旨在自动化容器化应用的部署、扩展和管理。它最初由Google开发，现在由云原生计算基金会（CNCF）维护。以下是Kubernetes的基础介绍：</p>
<h3 id="1-Kubernetes的核心概念"><a href="#1-Kubernetes的核心概念" class="headerlink" title="1. Kubernetes的核心概念"></a>1. <strong>Kubernetes的核心概念</strong></h3><ul>
<li><p><strong>容器</strong>：Kubernetes主要用于管理容器化应用，容器是一种轻量级的虚拟化技术，可以在同一操作系统上运行多个独立的应用实例。</p>
</li>
<li><p><strong>Pod</strong>：Pod是Kubernetes中最小的可部署单元，通常包含一个或多个紧密相关的容器。Pod中的容器共享网络和存储资源。</p>
</li>
<li><p><strong>节点（Node）</strong>：节点是Kubernetes集群中的一个工作机器，可以是物理机或虚拟机。每个节点上运行着一个Kubernetes代理（kubelet）和容器运行时（如Docker）。</p>
</li>
<li><p><strong>集群（Cluster）</strong>：集群是由多个节点组成的集合，Kubernetes通过集群来管理和调度容器。</p>
</li>
<li><p><strong>控制平面（Control Plane）</strong>：控制平面负责管理集群的状态，包括调度、监控和维护集群的健康。主要组件包括API服务器、调度器、控制管理器和etcd（分布式键值存储）。</p>
</li>
</ul>
<h3 id="2-Kubernetes的主要组件"><a href="#2-Kubernetes的主要组件" class="headerlink" title="2. Kubernetes的主要组件"></a>2. <strong>Kubernetes的主要组件</strong></h3><ul>
<li><p><strong>API Server</strong>：Kubernetes的核心组件，提供RESTful API接口，所有的操作都通过API Server进行。</p>
</li>
<li><p><strong>etcd</strong>：一个高可用的分布式键值存储，用于保存Kubernetes集群的所有数据和状态。</p>
</li>
<li><p><strong>Scheduler</strong>：负责将Pod调度到合适的节点上，考虑资源需求、节点负载等因素。</p>
</li>
<li><p><strong>Controller Manager</strong>：管理集群的控制循环，确保集群的实际状态与期望状态一致。</p>
</li>
<li><p><strong>Kubelet</strong>：运行在每个节点上的代理，负责管理Pod的生命周期，确保容器正常运行。</p>
</li>
<li><p><strong>Kube Proxy</strong>：负责网络代理和负载均衡，处理服务的网络请求。</p>
</li>
</ul>
<h3 id="3-Kubernetes的基本资源"><a href="#3-Kubernetes的基本资源" class="headerlink" title="3. Kubernetes的基本资源"></a>3. <strong>Kubernetes的基本资源</strong></h3><ul>
<li><p><strong>Deployment</strong>：用于管理无状态应用的声明式更新，支持滚动更新和回滚。</p>
</li>
<li><p><strong>Service</strong>：定义一组Pod的访问策略，提供负载均衡和服务发现。</p>
</li>
<li><p><strong>ConfigMap</strong>：用于存储非机密的配置数据，可以在Pod中使用。</p>
</li>
<li><p><strong>Secret</strong>：用于存储敏感信息（如密码、令牌等），以安全的方式提供给Pod。</p>
</li>
<li><p><strong>Volume</strong>：用于持久化存储，支持多种存储后端（如NFS、云存储等）。</p>
</li>
</ul>
<h3 id="4-Kubernetes的工作流程"><a href="#4-Kubernetes的工作流程" class="headerlink" title="4. Kubernetes的工作流程"></a>4. <strong>Kubernetes的工作流程</strong></h3><ol>
<li><p><strong>定义应用</strong>：使用YAML或JSON文件定义应用的期望状态，包括Pod、Service、Deployment等。</p>
</li>
<li><p><strong>提交配置</strong>：将定义的配置提交到Kubernetes API Server。</p>
</li>
<li><p><strong>调度与部署</strong>：Kubernetes Scheduler根据资源需求和策略将Pod调度到合适的节点上，Kubelet负责在节点上启动和管理容器。</p>
</li>
<li><p><strong>监控与自愈</strong>：Kubernetes持续监控集群状态，确保实际状态与期望状态一致。如果某个Pod失败，Kubernetes会自动重启或替换它。</p>
</li>
</ol>
<h3 id="5-Kubernetes的优势"><a href="#5-Kubernetes的优势" class="headerlink" title="5. Kubernetes的优势"></a>5. <strong>Kubernetes的优势</strong></h3><ul>
<li><p><strong>自动化</strong>：自动化容器的部署、扩展和管理，减少人工干预。</p>
</li>
<li><p><strong>可扩展性</strong>：支持水平扩展和负载均衡，能够处理大规模的应用。</p>
</li>
<li><p><strong>自愈能力</strong>：自动监控和修复故障，确保应用的高可用性。</p>
</li>
<li><p><strong>灵活性</strong>：支持多种云环境和本地部署，适应不同的基础设施。</p>
</li>
</ul>
<h3 id="6-Kubernetes的生态系统"><a href="#6-Kubernetes的生态系统" class="headerlink" title="6. Kubernetes的生态系统"></a>6. <strong>Kubernetes的生态系统</strong></h3><p>Kubernetes有一个丰富的生态系统，包含许多工具和项目，如：</p>
<ul>
<li><strong>Helm</strong>：Kubernetes的包管理工具，简化应用的部署和管理。</li>
<li><strong>Prometheus</strong>：用于监控和告警的开源系统。</li>
<li><strong>Istio</strong>：服务网格技术，提供微服务间的通信管理和安全性。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Kubernetes是现代云原生应用的核心技术之一，提供了强大的容器编排能力。通过理解Kubernetes的基本概念和组件，开发者和运维人员可以更有效地管理和部署容器化应用。</p>
]]></content>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>【解决】已经添加了秘钥后还报git@github.com: Permission denied (publickey).</title>
    <url>/2023/12/19/%E5%B7%B2%E7%BB%8F%E6%B7%BB%E5%8A%A0%E4%BA%86%E7%A7%98%E9%92%A5%E5%90%8E%E8%BF%98%E6%8A%A5git-github-com-Permission-denied-publickey/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在更新一些 nvim 依赖时发现偶尔会报：<code>git@github.com: Permission denied (publickey).</code>，但是我已经添加过 github 秘钥配置了，使用 ssh 命令<code>ssh -T git@github.com</code>测试也报同样问题。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/g_id_rsa # g_id_rsa为本机的github秘钥</span><br></pre></td></tr></table></figure>

<p>再使用<code>ssh -T git@github.com</code>测试，成功！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>已经添加过秘钥但是还报错通常是本机的这个 git 仓库并没有和这个 SSH key 关联上，重新添加一下就好了。</p>
]]></content>
      <categories>
        <category>经验之谈</category>
      </categories>
  </entry>
  <entry>
    <title>被碎片化信息包围的我们...</title>
    <url>/2023/12/08/%E8%A2%AB%E7%A2%8E%E7%89%87%E5%8C%96%E4%BF%A1%E6%81%AF%E5%8C%85%E5%9B%B4%E7%9A%84%E6%88%91%E4%BB%AC/</url>
    <content><![CDATA[<p>2023 年，经历过数次微博、抖音的卸载安装操作后，最终我每日<code>临幸</code>的 APP 分成了两个设备群：</p>
<ul>
<li><p>手机：小红书、微博、王者荣耀</p>
</li>
<li><p>Pad：抖音</p>
<p>我很忙，我真的很忙。每天都要给自己洗脑，从睁眼到入睡，无数的内容占据了我的时间，吃饭会看一会、去卫生间看一会，下班回家先摊着刷会抖音，不知不觉时间就从 20:00 跳到了 23:59，你问我这期间获取到了什么消息？答：阿巴阿巴阿巴…..</p>
<p>相信有这种体验的不止我一个人，为此我们可以做些什么呢？</p>
<ol>
<li>找一项日常的事情，坚持一个月。比如：每天背 10 个单词、读一篇好文、锻炼 30 分钟……习惯形成之后，成就感随之而来；</li>
<li>化碎片信息为整。每天挨个浏览的信息，按照目前大部分 APP 都有的推荐算法逻辑，大多会分为几类，对于我来说便是：摄影、萌宠、穿搭以及美食这几个大类，在结束一天的碎片化信息获取之后，我将使用思维导图的方式，把有意义的内容记录下来，太过重复的内容则使用 APP 自身的<code>不感兴趣</code>方式挪出我的推荐池，过滤电子垃圾；</li>
<li>主动检索。碎片化信息对我思维能力、记忆能力的影响很大，多采用主动出击的方式，了解自己需要的内容，避免被动的接收信息导致大脑不断刷新内存；</li>
<li>多接触现实生活，比如有意义有主题的社交、多参与拥抱大自然活动，从外部汲取能量。</li>
</ol>
<p>光阴似箭，日月如梭真是老生常谈了，现在到退休还有好几十年，希望多做一些有意义的事情吧！</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>随便写写</tag>
      </tags>
  </entry>
</search>
