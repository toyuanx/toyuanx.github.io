<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>原子酱</title>
  <subtitle>重诺，守时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-30T02:55:49.279Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>原子酱</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高频正则表达式</title>
    <link href="http://yoursite.com/2016/12/30/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/12/30/正则表达式/</id>
    <published>2016-12-30T02:02:00.000Z</published>
    <updated>2016-12-30T02:55:49.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2>
<p>    最近使用正则表达式进行<strong>字段验证</strong>的次数有明显增加趋势，许多程序设计语言都支持利用正则表达式进行字符串操作。趁此机会学习了正则表达式的语法，并整理了开发时常用正则表达式，好记性不如烂笔头，方便以后直接取用。</p>
<a id="more"></a>
<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="full-image" 是必须的 -->
<!--<a href="http://img.hb.aicdn.com/2495276fbb11a92d56901a0766fb3b53f154b5041c889c-IwBZY3_fw658" target="_blank">
<img src="/image-url" class="full-image" />
</a>-->
<h2 id="个人信息类">个人信息类</h2>
<ul>
<li>邮箱地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*$</li>
<li>手机号：^1\d{10}$</li>
<li>身份证号：^\d{15}|\d{18}$</li>
<li>密码（以字母开头，长度在6~18之间，只能包含字母、数字和下划线）：<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>\w{5,17}$</li>
<li>QQ：[\d]{6,11}$</li>
</ul>
<h2 id="业务类">业务类</h2>
<ul>
<li>股票：</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>a-zA-Z <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;    最近使用正则表达式进行&lt;strong&gt;字段验证&lt;/strong&gt;的次数有明显增加趋势，许多程序设计语言都支持利用正则表达式进行字符串操作。趁此机会学习了正则表达式的语法，并整理了开发时常用正则表达式，好记性不如烂笔头，方便以后直接取用。&lt;/p&gt;
    
    </summary>
    
      <category term="工具箱" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E7%AE%B1/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>PHP与jQuery</title>
    <link href="http://yoursite.com/2016/12/23/PHP%E4%B8%8EjQuery/"/>
    <id>http://yoursite.com/2016/12/23/PHP与jQuery/</id>
    <published>2016-12-23T07:56:20.000Z</published>
    <updated>2017-01-04T03:37:41.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2>
<p>    作为一个初入PHP，偶尔写一点后台管理系统的前端部分的小菜鸟，需要学习的东西真的太多太多。<br>
    循序渐进，本月研读了<strong>Pro PHP and jQuery</strong>这本书，印象深刻，所以趁热打铁整理了一些对前后端联调很有用的小Tips。</p>
<a id="more"></a>
<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="full-image" 是必须的 -->
<!--<a href="http://img.hb.aicdn.com/2495276fbb11a92d56901a0766fb3b53f154b5041c889c-IwBZY3_fw658" target="_blank">
<img src="/image-url" class="full-image" />
</a>-->
<blockquote>
<p>后台向前端传值方式：1、模板输出(smarty); 2、ajax函数回调；</p>
</blockquote>
<h2 id="写在最前">写在最前</h2>
<p>为了防止PHP中的变量符<code>$</code>与jQuery冲突，本文代码中<code>jQuery</code>与正常情况使用jQuery时的<code>$</code>等价。</p>
<h2 id="准备工作">准备工作</h2>
<h3 id="获取数据">获取数据</h3>
<p>即传送给后端的数据，多数为表单内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="string">'.content'</span>).html();  <span class="comment">//获取标签内所有内容，包括html符号等</span></div><div class="line">jQuery(<span class="string">'.content'</span>).text();  <span class="comment">//获取标签内所有文本</span></div><div class="line">jQuery(<span class="string">'.content'</span>).val();  <span class="comment">//获取value值</span></div><div class="line">jQuery(<span class="keyword">this</span>).parent().find(<span class="string">'.content'</span>).text(); <span class="comment">//在当前元素的父元素中查找content类，并获取文本值</span></div><div class="line">jQuery(<span class="keyword">this</span>).attr(<span class="string">'type'</span>);  <span class="comment">//获取当前元素type属性的值</span></div></pre></td></tr></table></figure>
<h3 id="前端数据验证">前端数据验证</h3>
<p>为防止前端频繁访问后台，加大服务器压力，前端需进行数据验证。</p>
<ul>
<li>空值判断</li>
<li>手机号、电子邮件等：使用正则表达式验证</li>
<li>提醒式验证：如“确定删除”，可以使用<code>confirm()</code>等方法</li>
</ul>
<p>验证失败可弹出提示或重定位界面。</p>
<h3 id="ajax传值">ajax传值</h3>
<p>前端验证成功后就可以向后台请求数据了，jQuery给我们封装了ajax方法，多数操作将是<code>success</code>回调函数中完成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax(&#123;</div><div class="line">	<span class="attr">type</span>: <span class="string">'post'</span>,	<span class="comment">//传值方式，post/get</span></div><div class="line">	url: <span class="string">'/gxapi/rank'</span>,	<span class="comment">//请求地址</span></div><div class="line">	dataType: <span class="string">"json"</span>,   <span class="comment">//传送数据格式，json是前后端常用传值数据格式</span></div><div class="line">	data: &#123;<span class="attr">content</span>: content, <span class="attr">type</span>: type&#125;, <span class="comment">//要传送的数据值&#123;后端接受字段名称：前端发送字段名称&#125;,通常另两者名称相等。</span></div><div class="line">	success: funtion (res) &#123;</div><div class="line">		<span class="keyword">if</span>(res.code) &#123;</div><div class="line">			<span class="comment">//有数据的操作,多在此更改局部数据</span></div><div class="line">			...</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//请求失败，多为未登录、无数据等</span></div><div class="line">			...</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意：1、浏览器可以自动识别json数据，web应用可以不用设置；2、如果涉及移动端，则必须设置json格式；3、跨域请求数据需设置dataType格式为<code>jsonp</code>。</p>
<h2 id="碎片功能">碎片功能</h2>
<h3 id="点击事件">点击事件</h3>
<p>点击某元素触发事件，如增加、删除、编辑等。</p>
<ul>
<li>通过模板渲染所得的页面，可以直接对dom元素进行操作，例如：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="string">'.btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//点击事件后续操作</span></div><div class="line">	...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>通过动态生成得到的界面，操作dom元素时需要绑定元素，下面的例子中，<code>list</code>类是非动态生成的元素，我们将<code>delete</code>点击事件绑定到该元素上，例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="string">'.list'</span>).on(<span class="string">'click'</span>, <span class="string">'.delete'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//点击事件后续操作</span></div><div class="line">	...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>其中<code>click</code>可以更改为<code>change</code>、<code>hover</code>等，在对列表进行操作时常用。另外还有一种方式，适用于jQuery版本较低的场景。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="string">".list"</span>).delegate(<span class="string">".delete"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//点击事件后续操作</span></div><div class="line">	...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>需要注意的是，这两个方法的<code>click</code>位置不同。</p>
<h3 id="数据处理">数据处理</h3>
<ul>
<li>保留小数点后两位：Number(num).toFixed(2)</li>
<li>遍历：可用于批量操作</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> jQuery.each(res.data, <span class="function"><span class="keyword">function</span> (<span class="params">i, item</span>) </span>&#123;</div><div class="line">	<span class="comment">//批量操作、结合append()生成列表行等</span></div><div class="line">	...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意：当遍历dom元素时<strong>一定要注意</strong>在遍历前元素已经生成。</p>
<h3 id="其他小技巧">其他小技巧</h3>
<ul>
<li>前端获取到数据后可以存在<code>display:none</code>的标签里，便于以后使用。</li>
<li>要更改样式最简单的方法还是通过css，故我们可以通过给元素添加class并设置class的值来批量更改样式。</li>
</ul>
<p>PS：需要中文版<strong>Pro PHP and jQuery</strong>（深入PHP与jQuery，包括书籍源代码.pdf）的同学可以给我留言。<br>
仅限用于学习交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;    作为一个初入PHP，偶尔写一点后台管理系统的前端部分的小菜鸟，需要学习的东西真的太多太多。&lt;br&gt;
    循序渐进，本月研读了&lt;strong&gt;Pro PHP and jQuery&lt;/strong&gt;这本书，印象深刻，所以趁热打铁整理了一些对前后端联调很有用的小Tips。&lt;/p&gt;
    
    </summary>
    
      <category term="项目开发" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
      <category term="PHP" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>API是什么</title>
    <link href="http://yoursite.com/2016/12/22/api/"/>
    <id>http://yoursite.com/2016/12/22/api/</id>
    <published>2016-12-22T02:42:30.000Z</published>
    <updated>2016-12-26T02:42:57.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2>
<p>    API（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。<br>
    简单的说，就是通过某一预先定义的渠道读/写数据的方式。</p>
<a id="more"></a>
<h3 id="例如：">例如：</h3>
<p>条形码查询：<a href="http://data.3023.com/" target="_blank" rel="external">http://data.3023.com/</a></p>
<h3 id="接口：">接口：</h3>
<pre><code>http://api.3023.com/barcode/barcode?barcode=6936292120079
</code></pre>
<h3 id="方式：get">方式：GET</h3>
<p><strong>请求参数：</strong></p>
<pre><code>参数：barcode
位置：urlParam
必填：是
说明：条形码（8-14位数字），正则：/^[0-9]{8,14}$/
</code></pre>
<p><strong>返回示例：</strong></p>
<pre><code>{
    &quot;name&quot;: &quot;石药阿莫西林胶囊0.25g×50粒/盒&quot;,
    &quot;price&quot;: &quot;9&quot;,
    &quot;spec&quot;: &quot;0.25g×50粒/盒&quot;,
    &quot;brand&quot;: &quot;石药&quot;,
    &quot;country&quot;: &quot;中国&quot;,
    &quot;company&quot;: &quot;石药集团中诺药业(石家庄)有限公司&quot;,
    &quot;prefix&quot;: &quot;69362921&quot;,
    &quot;addr&quot;: &quot;&quot;,
    &quot;gtin&quot;: &quot;http://www.anccnet.com/comm/GTIN.aspx?GTIN=06936292120079&quot;
}
</code></pre>
<ul>
<li>
<p>API接口广泛应用于APP、客户端、网页、软件等，不仅适用于获取数据（读），也适用于更新数据、删除数据（写）以及其他操作等。</p>
</li>
<li>
<p>API接口的数据传输方式不仅仅局限于HTTP协议，也可以使用TCP、UDP协议等。</p>
</li>
<li>
<p>宽泛的说，API接口就是一种传输（操作）数据的方式</p>
</li>
</ul>
<p>互联网无非就是数据的传输，可以说互联网所有APP、客户端、网页，均应用了API接口这一技术。</p>
<h3 id="为什么说网页也应用了api接口技术？">为什么说网页也应用了API接口技术？</h3>
<p>例如：</p>
<p><a href="https://www.zhihu.com/question/38594466/" target="_blank" rel="external">https://www.zhihu.com/question/38594466/</a></p>
<p>我们能可以把这一网址就理解为一个API接口，其中 38594466 即为变量，只是说它返回的数据并不是标准的JSON或XML格式而已（套用了模版），实际上它在服务端也就是读写数据库的操作，原始数据同样也可以返回标准的JSON/XML格式。</p>
<p>开放平台、oauth是应用API接口技术的一个典型。</p>
<p>作者：Break<br>
链接：<a href="https://www.zhihu.com/question/38594466/answer/130624426" target="_blank" rel="external">https://www.zhihu.com/question/38594466/answer/130624426</a><br>
来源：知乎<br>
著作权归作者所有，转载请联系作者获得授权。</p>
<h3 id="好文推荐">好文推荐</h3>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;    API（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。&lt;br&gt;
    简单的说，就是通过某一预先定义的渠道读/写数据的方式。&lt;/p&gt;
    
    </summary>
    
      <category term="名词精选" scheme="http://yoursite.com/categories/%E5%90%8D%E8%AF%8D%E7%B2%BE%E9%80%89/"/>
    
      <category term="API" scheme="http://yoursite.com/categories/%E5%90%8D%E8%AF%8D%E7%B2%BE%E9%80%89/API/"/>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>hexo常见错误及其解决方法</title>
    <link href="http://yoursite.com/2016/12/20/hexo-bugs/"/>
    <id>http://yoursite.com/2016/12/20/hexo-bugs/</id>
    <published>2016-12-20T08:11:11.000Z</published>
    <updated>2016-12-22T01:37:46.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2>
<p>    如题，在我们学习一门全新的语言或者启动一个新项目时，大部分都需要对环境或者系统做一些相关的配置，对于新手来说，配置出错基本算是家常便饭了。<br>
    基础没打好，谈什么建高楼大厦呢？抛砖引玉，下面看看在使用<strong>hexo搭建博客</strong>的过程中遇到的问题吧。</p>
<a id="more"></a>
<h2 id="localhost-4000访问无响应">localhost:4000访问无响应</h2>
<h4 id="错误描述">错误描述</h4>
<ul>
<li>终端无报错信息，显示<code>INFO Hexo is running at http://0.0.0.0:4000/</code></li>
<li>浏览器输入localhost:4000打开标签页一直在加载</li>
</ul>
<h4 id="解决方案">解决方案</h4>
<p>4000是hexo服务器的默认监听端口，可以通过以下命令查看端口占用情况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ netstat -ano</div><div class="line">//进程筛选</div><div class="line">$ netstat -ano | findstr <span class="string">"4000"</span></div></pre></td></tr></table></figure>
<p>解决端口占用问题我们重新设置一个端口port即可。（推荐文档：<a href="https://hexo.io/zh-cn/docs/server.html#hexo-server" target="_blank" rel="external">Hexo服务器</a>）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//安装hexo-server</div><div class="line">$ npm install hexo-server --save</div><div class="line">//启动服务器</div><div class="line">hexo server</div><div class="line">//更改端口</div><div class="line">$ hexo server -p 5000</div></pre></td></tr></table></figure>
<p>Hexo可以监视文件变动并自动更新，这意味着你更改文件后无需重启服务器就能在浏览器中看到修改结果。<br>
当看到如下结果时，输入提示地址即可以访问你的页面😃。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo server -p 5000</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:5000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<h2 id="bash-hexo-command-not-found">bash:hexo:command not found</h2>
<h4 id="错误描述-v2">错误描述</h4>
<p>    隔了几天没有更新博文，再次使用hexo命令时，一直提示<code>command not found</code>。这个错误提示想必大家在其他地方也经常会遇到，通常情况下<code>command not found</code>是系统找不到执行命令的路径引起的。<br>
比如我们在命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div></pre></td></tr></table></figure>
<p>如果命令行运行的当前目录不是执行命令的路径（一般为<code>../bin 目录</code>），则会提示无法找到命令。从这里我们就可以知道配置环境变量的优势了。</p>
<h4 id="解决方式">解决方式</h4>
<ul>
<li>设置环境变量<br>
<a href="http://jingyan.baidu.com/article/d5a880eb6aca7213f047cc6c.html" target="_blank" rel="external">windows添加环境变量</a><br>
<a href="http://jingyan.baidu.com/article/ea24bc399a73bcda62b33104.html" target="_blank" rel="external">linux添加环境变量</a></li>
<li>直接进入命令所属目录执行命令</li>
</ul>
<h4 id="小结">小结</h4>
<p>安装hexo时默认会添加环境变量，报这个错误是因为我在配置其他环境变量时把hexo的路径删掉了！！🌀</p>
<h2 id="包含具体提示的错误">包含具体提示的错误</h2>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ hexo server -p 5000</div><div class="line">FATAL name of an <span class="built_in">alias</span> node must contain at least one character at line 120, column 23:</div><div class="line">        permalinkSymbol: *</div><div class="line">                          ^</div><div class="line">YAMLException: name of an <span class="built_in">alias</span> node must contain at least one character at line 120, column 23:</div><div class="line">        permalinkSymbol: *</div><div class="line">                          ^</div></pre></td></tr></table></figure>
<p>类似此类在运行hexo服务器或其他hexo命令时遇到的错误，基本上都会有非常明确的提示，按照提示找到相应的文件出错点修改即可，一般为<code>字符错误</code>，即字符使用不当。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;    如题，在我们学习一门全新的语言或者启动一个新项目时，大部分都需要对环境或者系统做一些相关的配置，对于新手来说，配置出错基本算是家常便饭了。&lt;br&gt;
    基础没打好，谈什么建高楼大厦呢？抛砖引玉，下面看看在使用&lt;strong&gt;hexo搭建博客&lt;/strong&gt;的过程中遇到的问题吧。&lt;/p&gt;
    
    </summary>
    
      <category term="解决方案" scheme="http://yoursite.com/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
      <category term="建站" scheme="http://yoursite.com/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>两分钟学懂路由</title>
    <link href="http://yoursite.com/2016/12/12/%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2016/12/12/路由/</id>
    <published>2016-12-12T01:56:21.000Z</published>
    <updated>2016-12-20T07:18:15.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2>
<p>    我们所说的路由与路由器其实是一个道理，通过一个入口接受请求，然后通过统一资源定位符（URL）匹配规则将请求分发到不同的地方。<br>
具体到一些主流框架上面，比如基于PHP的<strong>laravel</strong>、<strong>thinkphp</strong>，基于node.js的<strong>Express</strong>等，Router模块会配合Http模块分析请求， 并且按照一定规则解析去匹配路由，然后使用调度模块使逻辑调到某块代码（通常是控制器），最后返回响应(Response)。<br>
所以这种<strong>路由</strong>与家中上网使用的<strong>路由器</strong>，有异曲同工之妙。</p>
<a id="more"></a>
<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="full-image" 是必须的 -->
<!--<a href="http://img.hb.aicdn.com/2495276fbb11a92d56901a0766fb3b53f154b5041c889c-IwBZY3_fw658" target="_blank">
<img src="/image-url" class="full-image" />
</a>-->
<!--more-->
<h2 id="什么是路由">什么是路由</h2>
<blockquote>
<p>路由本身的定义就是信息传递者，有请求指路的意思。</p>
</blockquote>
<p>当我们在浏览器中输入要访问的链接地址，例如：<a href="http://music.163.com/#/user/home?id=92262007" target="_blank" rel="external">http://music.163.com/#/user/home?id=92262007</a> （我的网易云音乐ID） 回车之后他将展示相对应的页面，当改动id的参数时，我们可以看到不同的用户主页。<br>
在这个过程中，路由机制将特定形式的URL结构分解成系统对应的参数，我们可以对比<strong>文件夹路径地址</strong>进行学习，其中：</p>
<ul>
<li><a href="http://music.163.com" target="_blank" rel="external">http://music.163.com</a>  ：域名，首页地址</li>
<li>/#  ：可起反爬虫作用，详细解释可参考<a href=""></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;    我们所说的路由与路由器其实是一个道理，通过一个入口接受请求，然后通过统一资源定位符（URL）匹配规则将请求分发到不同的地方。&lt;br&gt;
具体到一些主流框架上面，比如基于PHP的&lt;strong&gt;laravel&lt;/strong&gt;、&lt;strong&gt;thinkphp&lt;/strong&gt;，基于node.js的&lt;strong&gt;Express&lt;/strong&gt;等，Router模块会配合Http模块分析请求， 并且按照一定规则解析去匹配路由，然后使用调度模块使逻辑调到某块代码（通常是控制器），最后返回响应(Response)。&lt;br&gt;
所以这种&lt;strong&gt;路由&lt;/strong&gt;与家中上网使用的&lt;strong&gt;路由器&lt;/strong&gt;，有异曲同工之妙。&lt;/p&gt;
    
    </summary>
    
      <category term="名词精选" scheme="http://yoursite.com/categories/%E5%90%8D%E8%AF%8D%E7%B2%BE%E9%80%89/"/>
    
      <category term="路由" scheme="http://yoursite.com/categories/%E5%90%8D%E8%AF%8D%E7%B2%BE%E9%80%89/%E8%B7%AF%E7%94%B1/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ALTER TABLE, 你真的学好了吗？</title>
    <link href="http://yoursite.com/2016/12/09/ALTER%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/12/09/ALTER命令/</id>
    <published>2016-12-09T02:34:45.000Z</published>
    <updated>2016-12-09T06:08:19.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2>
<p>    <code>ALTER TABLE</code>命令可以用来改变一个数据表的许多细节设计，比如增加或删除一些数据列、改变数据列的属性（如数据类型）、定义和删除各种索引等。例如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> titles <span class="keyword">CHANGE</span> title title <span class="built_in">VARCHAR</span>(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>上述命令把titles数据表里的title数据列的最大字符个数增加到了150个字符。其中第一个title是数据列的当前名字，第二个title是数据列的新名字（但没有改变）。接下来就让我们看看还有哪些<code>ALTER TABLE</code>命令吧。</p>
<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="full-image" 是必须的 -->
<!--<a href="http://img.hb.aicdn.com/2495276fbb11a92d56901a0766fb3b53f154b5041c889c-IwBZY3_fw658" target="_blank">
<img src="/image-url" class="full-image" />
</a>-->
<h3 id="增加一个数据列">增加一个数据列</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> newcloname coltype coloptions</div></pre></td></tr></table></figure>
<h3 id="删除一个数据列">删除一个数据列</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">DROP</span> cloname</div></pre></td></tr></table></figure>
<h3 id="修改一个数据列">修改一个数据列</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">CHANGE</span>  oldcloname newcloname coltype coloptions</div></pre></td></tr></table></figure>
<h3 id="增加一个索引">增加一个索引</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (indexcols)</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> <span class="keyword">INDEX</span> [indexname] (indexcols)</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [indexname] (indexcols)</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> FULLTEXT [indexname] (indexcols)</div></pre></td></tr></table></figure>
<h3 id="增加一个外键约束条件">增加一个外键约束条件</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> FOREIGN <span class="keyword">KEY</span> [indexname] (column1) <span class="keyword">REFERENCES</span> table2(clumn2)</div></pre></td></tr></table></figure>
<h3 id="删除一个索引">删除一个索引</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">DROP</span> <span class="keyword">INDEX</span> indexname</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">DROP</span>  FOREIGN <span class="keyword">KEY</span> indexname</div></pre></td></tr></table></figure>
<h3 id="改变全体文本数据列上的字符集">改变全体文本数据列上的字符集</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> chartsetname</div></pre></td></tr></table></figure>
<h3 id="改变数据表的类型-myisam-innodb">改变数据表的类型（MyISAM、InnoDB）</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename ENGIN typename</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;    &lt;code&gt;ALTER TABLE&lt;/code&gt;命令可以用来改变一个数据表的许多细节设计，比如增加或删除一些数据列、改变数据列的属性（如数据类型）、定义和删除各种索引等。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; titles &lt;span class=&quot;keyword&quot;&gt;CHANGE&lt;/span&gt; title title &lt;span class=&quot;built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="项目开发" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>git与github二三事</title>
    <link href="http://yoursite.com/2016/12/05/git%E4%B8%8Egithub%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://yoursite.com/2016/12/05/git与github二三事/</id>
    <published>2016-12-05T03:39:35.000Z</published>
    <updated>2016-12-23T07:55:37.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2>
<p>    git是一张弓，github是靶子，你的源代码是箭（来自<a href="https://www.zhihu.com/people/jacobpeng/answers" target="_blank" rel="external">Jacob Peng</a>）。程序员对版本管理都不陌生，它可以用来记录项目的修改，项目成员之间的沟通和交流。<br>
    github是一个基于git的开源项目托管平台,它提供了web界面,你可以在上面创建资源仓库来存放你的项目，并用git在本地进行远程管理。</p>
<a id="more"></a>
<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="full-image" 是必须的 -->
<!--<a href="http://img.hb.aicdn.com/2495276fbb11a92d56901a0766fb3b53f154b5041c889c-IwBZY3_fw658" target="_blank">
<img src="http://img.hb.aicdn.com/2495276fbb11a92d56901a0766fb3b53f154b5041c889c-IwBZY3_fw658" class="full-image"/>
</a>-->
<h2 id="常用的git操作">常用的git操作</h2>
<h3 id="git连接github">git连接github</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<h3 id="本地克隆repository">本地克隆repository</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> [目标仓库链接地址]</div></pre></td></tr></table></figure>
<h3 id="代码提交">代码提交</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git add [.或file]</div><div class="line">$ git commit -m <span class="string">"提交信息"</span></div><div class="line">$ git pull [目标仓库链接地址]</div><div class="line">$ git push [目标仓库链接地址]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;    git是一张弓，github是靶子，你的源代码是箭（来自&lt;a href=&quot;https://www.zhihu.com/people/jacobpeng/answers&quot;&gt;Jacob Peng&lt;/a&gt;）。程序员对版本管理都不陌生，它可以用来记录项目的修改，项目成员之间的沟通和交流。&lt;br&gt;
    github是一个基于git的开源项目托管平台,它提供了web界面,你可以在上面创建资源仓库来存放你的项目，并用git在本地进行远程管理。&lt;/p&gt;
    
    </summary>
    
      <category term="项目开发" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
      <category term="版本管理" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="git &amp; github" scheme="http://yoursite.com/tags/git-github/"/>
    
      <category term="持续更新" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>Redis应用场景</title>
    <link href="http://yoursite.com/2016/12/02/Redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2016/12/02/Redis应用场景/</id>
    <published>2016-12-02T01:40:07.000Z</published>
    <updated>2016-12-02T05:57:20.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2>
<p>    Redis的一个很大好处就是可以不用整个转入到这个数据库，而是可以沿用之前的MySQL等数据库，而仅在一些特定的应用场景通过Redis的特性提高效率。<br>
    本文整理了11个在项目开发中可能使用的Web应用场景，如显示最新的项目列表、删除和过滤、排行榜等相关需求。</p>
<a id="more"></a>
<h2 id="redis简介">Redis简介</h2>
<p>    使用key-value储存，一个开源(BSD许可),内存存储的数据结构服务器,可用作数据库,高速缓存和消息队列代理。</p>
<h2 id="数据类型">数据类型</h2>
<ul>
<li>字符串（string）</li>
<li>哈希（hash）</li>
<li>列表（list）</li>
<li>集合（sort）</li>
<li>有序集合（sort set）</li>
</ul>
<h2 id="学习tips">学习Tips</h2>
<p><a href="http://naotu.baidu.com/file/3711c01eaee4359f57dc9c031012f30e?token=9b060c8bb77dd860" target="_blank">Redis学习网</a><br>
<a href="http://www.cnblogs.com/stephen-liu74/archive/2012/03/12/2348935.html" target="_blank" rel="external">Stephen Liu-Redis学习手册</a></p>
<h2 id="应用场景">应用场景</h2>
<blockquote>
<p>Redis的一个很大好处就是可以不用整个转入到这个数据库，而是可以沿用之前的MySQL等数据库，而仅在一些特定的应用场景通过Redis的特性提高效率。本文列出了11个这样的Web应用场景，如显示最新的项目列表、删除和过滤、排行榜等相关需求。</p>
</blockquote>
<ol>
<li>
<p>在主页中显示最新的项目列表(LPUSH, LTRIM)</p>
</li>
<li>
<p>删除和过滤(LREM)</p>
</li>
<li>
<p>排行榜及相关问题(ZADD,ZREVRANGE, ZRANK)</p>
</li>
<li>
<p>按照用户投票和时间排序(LPUSH, LTRIM, ZADD)</p>
</li>
<li>
<p>过期项目处理(ZRANGE…WITHSCORES)</p>
</li>
<li>
<p>计数(INCRBY, GETSET)</p>
</li>
<li>
<p>特定时间内的特定项目(SADD)</p>
</li>
<li>
<p>实时分析正在发生的情况，用于数据统计与防止垃圾邮件等</p>
</li>
<li>
<p>Pub/Sub</p>
</li>
<li>
<p>队列</p>
</li>
<li>
<p>缓存</p>
</li>
</ol>
<h2 id="结语">结语</h2>
<p>Redis命令，简洁但功能强大，组合使用效果更佳，这点本人在项目中深有体会。</p>
<p>目前使用的较多的是字符串数据类型的一些命令，我们常在存取比大于7:3时使用Redis减少数据库压力。</p>
<p>比如访问量较大的首页区块，何时写Redis也值得好好思考。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;    Redis的一个很大好处就是可以不用整个转入到这个数据库，而是可以沿用之前的MySQL等数据库，而仅在一些特定的应用场景通过Redis的特性提高效率。&lt;br&gt;
    本文整理了11个在项目开发中可能使用的Web应用场景，如显示最新的项目列表、删除和过滤、排行榜等相关需求。&lt;/p&gt;
    
    </summary>
    
      <category term="项目开发" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
      <category term="缓存机制" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://yoursite.com/2016/11/29/hello-world/"/>
    <id>http://yoursite.com/2016/11/29/hello-world/</id>
    <published>2016-11-29T06:34:33.278Z</published>
    <updated>2016-12-06T09:15:59.252Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了这么久终于找到一个喜欢的博客主题了，那就是Hexo-NexT,Hexo基于node.js,之前自己也试着用node仿了一个简书的博客主题，支持多人登录。<br>
完善之后再放出来遛遛了。废话不多说，多看书，写好文。</p>
<a id="more"></a>
<h2 id="快速入门">快速入门</h2>
<h3 id="新建文章">新建文章</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="启动服务器">启动服务器</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server p -5000</div></pre></td></tr></table></figure>
<p>默认端口为4000<br>
More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="生成静态文件">生成静态文件</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="发布">发布</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了这么久终于找到一个喜欢的博客主题了，那就是Hexo-NexT,Hexo基于node.js,之前自己也试着用node仿了一个简书的博客主题，支持多人登录。&lt;br&gt;
完善之后再放出来遛遛了。废话不多说，多看书，写好文。&lt;/p&gt;
    
    </summary>
    
      <category term="项目开发" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Hello Hexo" scheme="http://yoursite.com/tags/Hello-Hexo/"/>
    
  </entry>
  
</feed>
